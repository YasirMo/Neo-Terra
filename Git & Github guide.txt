

## What is Git?

Free and open source version control system.

## What is Version Control?

The management of changes to documents, computer programs, large websites, and other collections of information.

## What is GitHub?

A website to host your repositories online.

## Repository?

Project, or the folder/place where your project is kept.

A project's repository contains all of the project's files and stores each file's revision history.

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8a7438ea-ec0e-4a4b-8980-d509586a8e0f/Screenshot_2020-11-20_023123.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8a7438ea-ec0e-4a4b-8980-d509586a8e0f/Screenshot_2020-11-20_023123.png)

Source: [Git & GitHub Tutorial for Beginners playlist](https://www.youtube.com/playlist?list=PL4cUxeGkcC9goXbgTDQ0n_4TBzOO0ocPR)

The 'My Project' folder in the picture is the repository on the local machine which is tracked by Git.

The ***.git folder*** inside the 'My Project' folder confirms that the folder is a repository.

Because the ***.git*** ***folder*** is at the root level, Git is going to track any changes in the folder, including changes to the subfolder.

**If the *.git folder* was in the 'img' folder and not at the root level, then Git would've only tracked changes to the 'img' folder. *So, only the 'img' folder would've been the repository.***

**Git tracks the content of the project folder/repository for us.**

---

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a4a67123-6219-4994-9be1-757731e7a426/Screenshot_2020-11-20_025537.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a4a67123-6219-4994-9be1-757731e7a426/Screenshot_2020-11-20_025537.png)

Source: [Git & GitHub Tutorial for Beginners playlist](https://www.youtube.com/playlist?list=PL4cUxeGkcC9goXbgTDQ0n_4TBzOO0ocPR)

After any changes to a file is made, it is in the '***Modified***' stage. Such files are modified files.

If we want to save the modified file to the repo/include it in the commit, then we add the file to the '***Staging***' area.

And then when we create a commit, the file and its changes are going to be ***committed***.

After the file is committed, a snapshot of the file is going to be added into the commit history.

---

## ‚öôÔ∏èSetting up Git

**If you haven't downloaded Git yet, then download it from [*here*](https://git-scm.com/downloads).**

### Setting Username in Git:

Git uses a username to associate commits with an identity.
Note: The Git username is not the same as your GitHub username.

You can change the name that is associated with your Git commits using the **`git config`** command.
- The new name you set will be visible in any future commits you push to GitHub from the command line.
- Changing the name associated with your Git commits using `git config` will only affect future commits and will not change the name used for past commits.

**Setting your Git username for every repository on your computer:**

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/be124d8d-c851-4b3e-bff6-0ea4e2af4985/Screenshot_2020-11-28_070743.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/be124d8d-c851-4b3e-bff6-0ea4e2af4985/Screenshot_2020-11-28_070743.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/using-git/setting-your-username-in-git](https://docs.github.com/en/free-pro-team@latest/github/using-git/setting-your-username-in-git)

**Setting your Git username for a single repository:**

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3b08d5d8-94e2-4459-801a-50e093f90776/Screenshot_2020-11-28_071240.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3b08d5d8-94e2-4459-801a-50e093f90776/Screenshot_2020-11-28_071240.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/using-git/setting-your-username-in-git](https://docs.github.com/en/free-pro-team@latest/github/using-git/setting-your-username-in-git)

Note: You can use any **Command Line interface** instead of **Git Bash**.

### Setting Commit Email Address:

You can set the email address that is used to author commits on GitHub and on your computer.
- GitHub uses your commit email address to associate commits with your GitHub account.
- For web-based Git operations, you can set your commit email address on GitHub. For commits you push from the command line, you can set your commit email address in Git.

Any commits you made prior to changing your commit email address are still associated with your previous email address.

**Setting your your commit email address on GitHub:**
1. In the upper-right corner of any page, click your profile photo, then click Settings.
2. In the left sidebar, click Emails.
3. In "Add email address", type your email address and click Add.
4. Verify your email address.
5. In the "Primary email address" list, select the email address you'd like to associate with your web-based Git operations.
6. To keep your email address private when performing web-based Git operations, click Keep my email address private.

**Setting your email address in Git:**
1. Open Git Bash/any Command Line interface.
2. Type and enter the ' `git config --global user.email` "email@example.com" ' command.
3. Confirm that you've set the email correctly in Git by typing and entering the command `git config --global user.email` .
4. Add the email address to your account on GitHub, so that your commits are attributed to you and appear in your contributions graph.

**Setting your email address for a single repository:**
1. Open Git Bash/any Command Line interface.
2. Change the current working directory to the local repository where you want to configure the email address that you associate with your Git commits.
3. Type and enter the command ' `git config user.email` "email@example.com" '.
4. Confirm that you've set the email correctly in Git by typing and entering the command `git config user.email` .
5. Add the email address to your account on GitHub, so that your commits are attributed to you and appear in your contributions graph.

## üîêAuthenticating with GitHub from Git

When you connect to a GitHub repository from Git, you'll need to authenticate with GitHub using either **HTTPS** or **SSH**.
- Basically, authenticating is the way by which you [clone](https://www.notion.so/git-clone-Link-of-the-repo-2b21f8e62139402d8188c696f46fac69) a repository. And, HTTP and SHH are two protocols following which you can clone a repository.

**HTTP:** If you clone with HTTPS, you can cache your GitHub [credentials](https://git-scm.com/docs/gitcredentials) (e.g. username and password) in Git using a credential helper.
- HTTPS is less likely to be blocked by a firewall. The https:// clone URLs are available on all repositories, public and private. These URLs work everywhere -- even if you are behind a firewall or proxy.
- When you `git clone`, `git fetch`, `git pull`, or `git push` (These are [Git Commands](https://www.notion.so/Git-GitHub-61bc81766b2e4c7d9a346db3078ce833)) to a remote repository using HTTPS URLs on the command line, Git will ask for your GitHub username and password.
- In case you don't know what is meant by 'cache', it primarily refers to a thing that is hidden or stored somewhere, or to the place where it is hidden typically for a short period of time.

**SSH:** If you clone with SSH, you must generate SSH keys on each computer you use to push or pull from GitHub.
- SSH URLs provide access to a Git repository via SSH, a secure protocol. To use these URLs, you must generate an SSH keypair on your computer and add the public key to your GitHub account.
- However, it's not an absolute necessity to generate a new keypair for each machine.
- SSH Keys do not provide access to your GitHub account, so your account cannot be hijacked if your key is stolen.
- When you `git clone`, `git fetch`, `git pull`, or `git push` to a remote repository using SSH URLs, you'll be prompted for a password and must provide your [SSH key passphrase](https://www.notion.so/Git-GitHub-61bc81766b2e4c7d9a346db3078ce833).

**üîë Generating a new SSH key:**
1. Open Git Bash/any Command Line interface.
2. Type and enter ' `ssh-keygen -t ed25519 -C` "email@example.com" ' to create a new SSH key, using the provided email as a label.
If you are using a legacy system (An old and outdated method, technology, computer system, or application program) that doesn't support the *Ed25519 algorithm*, then use ' `ssh-keygen -t rsa -b 4096 -C` "your_email@example.com" '.
3. When you're prompted to "Enter a file in which to save the key," press Enter. This accepts the default file location. The default location: ***(/c/Users/you/.ssh/id_ed25519)***
4. At the prompt, type a secure passphrase üëá

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8468a6ab-d957-4e6e-853f-27161e2efe90/Screenshot_2020-11-28_232710.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8468a6ab-d957-4e6e-853f-27161e2efe90/Screenshot_2020-11-28_232710.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent)

### üîë Checking for existing SSH keys:

1. At first, open Git Bash/any Command Line interface

Then,

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/04e8d8c8-888c-4119-8df0-d5080a06ebf6/Screenshot_2020-12-01_112110.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/04e8d8c8-888c-4119-8df0-d5080a06ebf6/Screenshot_2020-12-01_112110.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/checking-for-existing-ssh-keys](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/checking-for-existing-ssh-keys)

If you don't have an existing public and private key pair, or don't wish to use any that are available to connect to GitHub, then generate a new SSH key.

### üîë Adding or changing a passphrase:

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8af090f4-0f52-413a-b033-835fb8f1581c/Screenshot_2020-11-28_233428.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8af090f4-0f52-413a-b033-835fb8f1581c/Screenshot_2020-11-28_233428.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/working-with-ssh-key-passphrases](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/working-with-ssh-key-passphrases)

If you don't want to reenter your passphrase every time you use your SSH key, you can add your key to the ***SSH agent***, which manages your SSH keys and remembers your passphrase.
Note:
- Before adding a new SSH key to the ssh-agent to manage your keys, you should have checked for existing SSH keys and generated a new SSH key.

### Adding your SSH key to the ssh-agent:

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7644dc3f-9da6-444e-95c2-8fb7d7e10cb2/Screenshot_2020-12-01_115408.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7644dc3f-9da6-444e-95c2-8fb7d7e10cb2/Screenshot_2020-12-01_115408.png)

Source: [https://stackoverflow.com/a/18683544/13155349](https://stackoverflow.com/a/18683544/13155349)

**If you're not using Git Bash:**

1. Turn on ssh-agent: `start-ssh-agent.cmd` 
üëÜIt will find your ***id_rsa*** and prompt you for the ***passphrase***.
If there is an error when you run the previous command, then that means ssh-agent is installed, but its service (on Windows) hasn't been started. In this case, set the service to start manually: `Get-Service -Name ssh-agent | Set-Service -StartupType Manual` 
üëÜThis means that as soon as you run ssh-agent, it'll start the service.
2. Add your SSH key to the ssh-agent: `ssh-add ~/.ssh/id_rsa` 

---

### Git Commands

- **All Git commands are in lower case**
- **All Git commands are used in a Command Line interface**

[Commands](https://www.notion.so/675c40b8aa534ce1bf119e653fb6bbf2)

**Whenever you create a commit (Save changes by using the command `git commit`), a string of characters is generated and is associated with the created commit to identify it. This string is commonly called the *SHA* (Also called '*SHA checksum*') of a commit.**

What is SHA?
SHA (Secure Hash Algorithm) is a checksum that uniquely identifies a commit. We commonly call it SHA, **but it's actually a hardened version of SHA-1 (In case you're wondering -- Yes, there are different versions of SHA) used in Git version control.**

So, what is a ***checksum***, also called ***checksum hash***?
- Basically, it's a string of characters used as an encryption standard that's generated by an algorithm.
And,
- **SHA-1 specifically is a checksum that is a 40 character string generated by an algorithm when it's fed all the changes in a commit after combining them.**
All commits have a unique string of 40 characters (SHA-1) that is used to identify them.

For ease of remembering, you could consider SHAs as IDs of the different commits like we would have ID cards to identify ourselves.

### First Commit:

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b4343589-4c72-415c-944f-2df5869c1fe5/Screenshot_2020-11-25_222409.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b4343589-4c72-415c-944f-2df5869c1fe5/Screenshot_2020-11-25_222409.png)

The combination of numbers & letters (In this case, **791bd4a**) next to "master (root-commit)" is the short version of the SHA of this particular commit.

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/08b77620-ae4c-4ebc-b959-68e13b34156c/Screenshot_2020-11-25_223043.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/08b77620-ae4c-4ebc-b959-68e13b34156c/Screenshot_2020-11-25_223043.png)

insertions(+): Indicates the total number of lines of code in all the committed files.

### Second Commit:

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a2a32d84-6888-44ff-8168-a136fc120b42/Screenshot_2020-11-25_224333.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a2a32d84-6888-44ff-8168-a136fc120b42/Screenshot_2020-11-25_224333.png)

5f8d746: Another SHA (short version) for the new commit on the master (default) branch.
"1 deletion(-)": I only changed a line and didn't delete anything. But, Git sees it as that we deleted a line and re-added it.
And the "1 insertion(+)" is indicating the re-added line, i.e. the only line I changed. 

---

**When we commit something, all it does is take everything (all the files) from the '*Staging*' area and create a commit from that.**

---

**'Master'/'Main' branch is the default branch that we're on when we create a *repo*, short for *repository*.**

---

**When we use the command `git log`, the history of all the commits will show up. And, the SHAs of all the commits can be seen in their full length (all 40 characters) when we view history as seen in the picture below:**

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7fd95ec3-e250-48f9-8ab8-fecc5cf9dacf/Screenshot_2020-11-25_230949.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7fd95ec3-e250-48f9-8ab8-fecc5cf9dacf/Screenshot_2020-11-25_230949.png)

---

### Undoing Things:

[Commands for Undoing](https://www.notion.so/f7686f812ba74f3495b73424ab0fecaf)

### Git Commands in action:

Once you've made changes locally on your computer and you're ready to put them in Git,

You tell Git to track and move them to the '**Staging**' area using the command `git add` or `git add .` .

You save your files to Git through the command `git commit`,

And then you upload your files to a place like GitHub or another remote repository through the command `git push`.

When there are changes to your code on GitHub and you want to bring them to your local machine, then you use the command `git pull`. You pull down changes from the remote repository.

### Branches

- **Master/Main branch: Represents the stable version of our code, and normally the code which is released or published.**
- **Branch created off/from the Master branch (Secondary branch): Represents the experimental version of our code.**

It's wise to try out new features or code on the secondary branches created from the Master branch, e.g. make edits, additions and changes to code.
Basically, this secondary branch is an isolated environment to experiment on our code.

When a branch is created from a point on the Master branch, the state of the code at that point is copied to the beginning point on the secondary branch.

And, then after making commits and testing changes until we're satisfied with the code on a secondary branch, we merge it back into the Master branch -- This is called a 'Merge Commit'.
The Master branch is updated with the new features/changes made when the 'Merge Commit' is made.

This branching-out system allows multiple people to work simultaneously on different features in a project.

---

### Collaborating on GitHub

- If we want to do any new work on a project or make changes in it, then the first thing we do is do a `git pull` to keep our files locally up-to-date.
- After `git pull`, the next thing we do is create a new branch (Secondary branch) by using an appropriate command (`git branch`/ `git checkout -b`) and work on the newly created branch; Because we want to preserve the state of the Master/Main branch.
- After making changes on the newly created branch (Secondary branch), we push this branch to the remote repo using the ' `git push` *<Alias/Link of the repo> <Branch name>*' command so that our collaborators can review the changes made by us.
And, then our collaborators and we can decide if we want to merge the changes into the Master/Main branch on the remote repo. If it's merged, then everyone again pulls the code/changes from the updated Master/Main branch on the remote repo to our local machines so that our files locally are also updated.
- The button '**Compare and pull request**' can be seen on our remote repo once the new branch is pushed to our remote repo. This button is used to compare the differences between the new changes and the current state of the Master/Main branch, and then we can merge the changes into the Master/Main branch on the remote repo by creating a ***pull request*** if everything is okay.
- '**Create pull request**': This is the button that we can see on a new page after clicking the '**Compare and pull request**' button. When we click it, it means we are putting in a request that we want to merge the new branch (Secondary branch) into the Master/Main branch on the remote repo. Our collaborators will get a ping/notification when we create a pull request so that they can review it.
- '**Merge pull request**': This button will appear once the '**Create pull request**' button is clicked. And another button, the '**Confirm merge**' will show up when the 'Merge pull request' button is clicked. The pushed new branch from our local machine will be merged into the remote repo's Master/Main branch when the 'Confirm merge' button is clicked.
Once the new branch is merged, we can delete the new branch if we want.
- Good practice -- We start a new branch whenever we want to start a new feature/modification. But, before starting a new feature, we always pull down the Master/Main branch from the remote repo to keep our local files up-to-date.

---

### Contributing to Open-Source Projects

**Open-Source Project**: When a project is open source, that means anybody is free to use, study, modify, and distribute the project for any purpose.

We can't just pull or add new branches to work on an Open-Source project because we actually don't have access to the particular Open-Source project like the owners. But, what we do is 'fork' the project (repo).

***fork*: This is a button on GitHub visible in all the Open-Source projects. When clicked, it creates a copy of the repository from the original account to our own account.**

- After forking, we clone our copy of the repo to our local machine and then work on the changes/modifications we want to make in the usual process, like when collaborating with team members.
- When we are satisfied with our modifications and want to add the modifications to the original repository, we go to the main page of the forked repository and click the '**New pull request**' button. And, after that we click the '**Create pull request**' button as usual.
- Once the pull request is created, only the owner of the original repository can merge our modifications/changes into it.

**Every different Open-Source project is going to have different guidelines for contributing.
Normally, there will be some kind of file in the repository called '*Contribution.md*'/'*Contributing.md*'.**

---

### When merging branches:

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4571c173-770a-46f6-b139-75789d6cfcc2/Screenshot_2020-11-26_235519.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4571c173-770a-46f6-b139-75789d6cfcc2/Screenshot_2020-11-26_235519.png)

"***Fast-forward***": It basically means is that we're kind of fast-forwarding up to the code changes that we have made in the 'feature-a' branch.
Because in the time between merging out and merging it back into the Master branch, we have actually not made any changes in the Master branch; So, all we do essentially is fast-forwarding up to that 'feature-a' change.

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0b670b27-deb7-4b13-9e82-08d5ced2ab41/Screenshot_2020-11-27_000737.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0b670b27-deb7-4b13-9e82-08d5ced2ab41/Screenshot_2020-11-27_000737.png)

"***Merge made by the 'recursive' strategy***": It means the merge was made by the 'Recursive Strategy' because this time we've not just fast-forwarded to the 'feature-b' code as this branch didn't have 'feature-a' in it.
In other words, the Master branch has changed in the time from taking the 'feature-b' branch out and merging it back in because we have added the 'feature-a' branch to the Master branch before merging back the 'feature-b' branch.

---

**Sometimes we could come across a situation called 'Conflict'; [this clip explains this situation and shows how to resolve a 'Conflict'](https://youtu.be/XX-Kct0PfFc?t=220).**

---

## README file

**'README' file on GitHub:
- The 'README' file is a set of useful information about a project, and a kind of manual.
- It introduces and explains a project.
- 'A README' is often the first item a visitor will see when visiting your repository.**

**Note:
- We add a README file only when we're creating a repository from scratch on GitHub. The README file is going to be downloaded as well when we clone the particular repository.
- The new repository is initialized ('*.git*' file is created) by adding a README file.
- If we are importing an existing repository, then adding a README file isn't necessary.**

'README' files typically include information on:
- What the project does
- Why the project is useful
- How users can get started with the project
- Where users can get help with the project
- Who maintains and contributes to the project

If we put our 'README' file in our repository's root, 'docs', or hidden '.github directory', then GitHub will recognize and automatically surface our 'README' to repository visitors.

**profile 'README'**: We can also add a 'README' to our GitHub profile to tell other people about ourselves.
- GitHub shows the profile 'README' at the top of our profile page.
- We can format text and [include emoji](https://www.notion.so/Git-GitHub-61bc81766b2e4c7d9a346db3078ce833), images, and GIFs in our profile 'README' by using 'GitHub Flavored Markdown'. GitHub has added some custom functionality to [Markdown](https://www.notion.so/Git-GitHub-61bc81766b2e4c7d9a346db3078ce833) to create GitHub Flavored Markdown, used to format prose and code across our site.

**GitHub will display our profile 'README' on our profile page if all of the following are true:
- You've created a repository with a name that matches your GitHub username.
- The repository is public.
- The repository contains a file named README.md in its root.
- The README.md file contains any content.**

**The profile README is removed from your GitHub profile if any of the following apply:
- The README file is empty or doesn't exist.
- The repository is private.
- The repository name no longer matches your username.**

### Template of an ideal README file:

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6546c70a-5c79-4992-8053-b85a80ecc524/Screenshot_20201127-220432_Chrome.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6546c70a-5c79-4992-8053-b85a80ecc524/Screenshot_20201127-220432_Chrome.jpg)

Source: [https://gist.github.com/DomPizzie/7a5ff55ffa9081f2de27c315f5018afc#file-readme-template-md](https://gist.github.com/DomPizzie/7a5ff55ffa9081f2de27c315f5018afc#file-readme-template-md)

---

## Basic writing and formatting syntax on GitHub

### Headings:

To create a heading, add one to six **#** symbols before your heading text. The number of **#** you use will determine the size of the heading.

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e50fe9d5-40a0-4204-b94a-0518bb6a0149/Screenshot_2020-11-27_200245.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e50fe9d5-40a0-4204-b94a-0518bb6a0149/Screenshot_2020-11-27_200245.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax](https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax)

### Styling Text:

You can indicate emphasis with **bold**, *italic*, or ~~strikethrough~~ text.

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/895c2974-9d56-4e94-bad0-8ac4d01ab474/Screenshot_2020-11-27_200610.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/895c2974-9d56-4e94-bad0-8ac4d01ab474/Screenshot_2020-11-27_200610.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax](https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax)

### Quoting Text:

You can quote text with a **>**.

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/39dfbbf3-a2da-4a78-bdb7-50312f332627/Screenshot_2020-11-27_200929.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/39dfbbf3-a2da-4a78-bdb7-50312f332627/Screenshot_2020-11-27_200929.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax](https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax)

### Quoting Coding:

You can call out code or a command within a sentence with single backticks (**`**). The text within the backticks will not be formatted.

```markdown
Use `git status` to list all new or modified files that haven't yet been committed.
```

Output:

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/579eb4ee-66eb-4a5e-b145-ccff4abb1887/Screenshot_2020-11-27_202450.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/579eb4ee-66eb-4a5e-b145-ccff4abb1887/Screenshot_2020-11-27_202450.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax](https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax)

To format code or text into its own distinct block, use **triple backticks**.

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2d57e9ca-34a0-4eb4-b328-48e84e273777/Screenshot_2020-11-27_202729.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2d57e9ca-34a0-4eb4-b328-48e84e273777/Screenshot_2020-11-27_202729.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax](https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax)

### Links:

You can create an inline link by wrapping link text in brackets **[ ]**, and then wrapping the URL in parentheses **( )**. You can also use the keyboard shortcut **command + k** to create a link.

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/538de5bb-5f0c-4f68-8ab7-6b050bd6dcc7/Screenshot_2020-11-27_203226.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/538de5bb-5f0c-4f68-8ab7-6b050bd6dcc7/Screenshot_2020-11-27_203226.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax](https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax)

### Section Links:

You can link directly to a section in a rendered file by ***hovering* over the section heading to expose the link**.

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4c4ad5c8-890c-4562-a8c6-737c54a209f3/Screenshot_2020-11-27_203543.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4c4ad5c8-890c-4562-a8c6-737c54a209f3/Screenshot_2020-11-27_203543.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax](https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax)

### Relative Links:

A relative link is **a link that is relative to the current file**.
- You can define relative links and image paths in your rendered files to help readers navigate to other files in your repository.
- Relative links are easier for users who clone your repository. Absolute links may not work in clones of your repository - So, it's recommended to use relative links to refer to other files within your repository.

For example, if you have a ***README file*** in root of your repository, and you have another file in ***docs/CONTRIBUTING.md***, the relative link to ***CONTRIBUTING.md*** in your ***README*** might look like this:

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2ef18973-b322-40bb-ab4e-f6abcd47630a/Screenshot_2020-11-27_204035.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2ef18973-b322-40bb-ab4e-f6abcd47630a/Screenshot_2020-11-27_204035.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax](https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax)

GitHub will automatically transform your relative link or image path based on whatever branch you're currently on, so that the link or path always works.
You can use all relative link operands, such as ***./*** and ***../***.

### Lists:

You can make an unordered list by preceding one or more lines of text with **-** or *****.

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9f1e01c3-87e6-4d5b-8b2f-ad8e892dc195/Screenshot_2020-11-27_205004.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9f1e01c3-87e6-4d5b-8b2f-ad8e892dc195/Screenshot_2020-11-27_205004.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax](https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax)

To order your list, precede each line with a number.

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cdc687e7-8b4d-4240-8d3e-137004a58da3/Screenshot_2020-11-27_205126.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cdc687e7-8b4d-4240-8d3e-137004a58da3/Screenshot_2020-11-27_205126.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax](https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax)

### Nested Lists:

You can create a nested list by ***indenting*** one or more list items below another item.

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d04bb726-aab7-4501-9c46-27f021bced24/Screenshot_2020-11-27_205449.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d04bb726-aab7-4501-9c46-27f021bced24/Screenshot_2020-11-27_205449.png)

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c6bdf1c0-6794-42a1-9eb0-eb8dcd252985/Screenshot_2020-11-27_205812.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c6bdf1c0-6794-42a1-9eb0-eb8dcd252985/Screenshot_2020-11-27_205812.png)

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6f6fa18d-94bf-4a1a-b2ac-96b54f10ced7/Screenshot_2020-11-27_210045.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6f6fa18d-94bf-4a1a-b2ac-96b54f10ced7/Screenshot_2020-11-27_210045.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax](https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax)

### Task Lists:

To create a task list, preface list items with a regular space character followed by **[ ]**. To mark a task as complete, use **[x]**.

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/371cc57f-ff81-48d8-8b2c-e36531ee3a69/Screenshot_2020-11-27_210350.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/371cc57f-ff81-48d8-8b2c-e36531ee3a69/Screenshot_2020-11-27_210350.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax](https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax)

You can mention a person or team on GitHub by typing ***@*** plus their username or team name. This will trigger a notification and bring their attention to the conversation. People will also receive a notification if you edit a comment to mention their username or team name.

### Referencing issues and pull requests:

You can bring up a list of suggested issues and pull requests within the repository by typing ***#***.
- Type the *issue* or *pull request* number or title to filter the list, and then press either tab or enter to complete the highlighted result.

### Using Emojis:

You can add emoji to your writing by typing **:EMOJICODE:** .

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ac742883-98b8-4e5e-96c3-9e099134f104/Screenshot_2020-11-27_211818.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ac742883-98b8-4e5e-96c3-9e099134f104/Screenshot_2020-11-27_211818.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax](https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax)

### Paragraphs:

You can create a new paragraph by leaving a blank line between lines of text.

### Ignoring Markdown Formatting:

You can tell GitHub to ignore (or escape) Markdown formatting by using **\** before the Markdown character.

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9d1f3fee-9537-492f-aede-3b637df27104/Screenshot_2020-11-27_212252.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9d1f3fee-9537-492f-aede-3b637df27104/Screenshot_2020-11-27_212252.png)

Source: [https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax](https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax)

### For more information, see [GitHub Docs - Basic writing and formatting syntax](https://docs.github.com/en/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax)

---

### What is Markdown?

[Markdown](https://daringfireball.net/projects/markdown/) is a text-to-HTML conversion tool for web writers.
Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML). 

Thus, ‚ÄúMarkdown‚Äù is two things:
(1) a plain text formatting syntax;
(2) And a software tool, written in Perl, that converts the plain text formatting to HTML.

In case you don't know what 'syntax' is,
Syntax is the arrangement of words and phrases to create well-formed sentences in a language. And in terms of computer language, syntax is the structure of statements in a computer language.

Basically, [Markdown‚Äôs syntax](https://daringfireball.net/projects/markdown/syntax) is comprised entirely of punctuation characters, which punctuation characters have been carefully chosen so as to look like what they mean. E.g., asterisks around a word actually look like *emphasis*. Markdown lists look like, well, lists. Even blockquotes look like quoted passages of text, assuming you‚Äôve ever used email.

### Example-1:

```markdown
A First Level Header
====================

A Second Level Header
---------------------

Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.

The quick brown fox jumped over the lazy
dog's back.

### Header 3

> This is a blockquote.
> 
> This is the second paragraph in the blockquote.
>
> ## This is an H2 in a blockquote
```

Output:

```html
<h1>A First Level Header</h1>

<h2>A Second Level Header</h2>

<p>Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.</p>

<p>The quick brown fox jumped over the lazy
dog's back.</p>

<h3>Header 3</h3>

<blockquote>
    <p>This is a blockquote.</p>

    <p>This is the second paragraph in the blockquote.</p>

    <h2>This is an H2 in a blockquote</h2>
</blockquote>
```

### Example-2:

```markdown
Some of these words *are emphasized*.
Some of these words _are emphasized also_.

Use two asterisks for **strong emphasis**.
Or, if you prefer, __use two underscores instead__.
```

Output:

```html
<p>Some of these words <em>are emphasized</em>.
Some of these words <em>are emphasized also</em>.</p>

<p>Use two asterisks for <strong>strong emphasis</strong>.
Or, if you prefer, <strong>use two underscores instead</strong>.</p>
```




**Find me on *[Twitter](https://twitter.com/fateen_alam)* || *[Reddit](https://www.reddit.com/user/Fateen45)***

